name: CI Build
on:
  pull_request:
  push:
    branches:
      - master
      - 'release/**'
  workflow_dispatch:

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      driver_changed: ${{ steps.filter.outputs.driver }}
      libscap_changed: ${{ steps.filter.outputs.libscap }}
      libsinsp_changed: ${{ steps.filter.outputs.libsinsp }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          driver:
            - 'driver/**'
          libscap:
            - 'userspace/libscap/**'
          libsinsp:
            - 'userspace/libsinsp/**'




  build-and-test-modern-bpf-s390x:
    name: build-and-test-modern-bpf-x86 😇 (bundled_deps)
    runs-on: s390x-runner-01
    #needs: paths-filter
    steps:

      - name: Checkout Libs ⤵️
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install deps ⛓️
        run: |
          sudo dnf update -y
          echo sudo dnf install -y bpftool c-ares-devel clang cmake curl-devel git grpc-devel grpc-plugins gtest-devel jq-devel jsoncpp-devel libb64-devel libbpf-devel libcap-devel openssl-devel protobuf-devel tbb-devel wget

      - name: Build scap-open 🏗️
        run: |
          mkdir -p build
          cd build && cmake -DUSE_BUNDLED_DEPS=ON -DBUILD_LIBSCAP_MODERN_BPF=ON -DBUILD_MODERN_BPF_TEST=ON -DMODERN_BPF_DEBUG_MODE=ON -DBUILD_LIBSCAP_GVISOR=OFF ../
          make scap-open

      - name: Run scap-open 🏎️
        run: |
          cd build
          sudo ./libscap/examples/01-open/scap-open --modern_bpf --num_events 0

      - name: Build bpf_test 🏗️
        run: |
          cd build
          make bpf_test

      - name: Running tests 🧪
        run: |
          cd build
          sudo ./test/modern_bpf/bpf_test --verbose


  run-e2e-tests-amd64:
    name: run-e2e-tests-amd64
    strategy:
      matrix:
        name: [system_deps, bundled_deps, system_deps_w_chisels]
        include:
          - name: system_deps
            cmake_opts: -DBUILD_BPF=On -DUSE_BUNDLED_DEPS=False
          - name: bundled_deps
            cmake_opts: -DBUILD_BPF=On -DUSE_BUNDLED_DEPS=True
          - name: system_deps_w_chisels
            cmake_opts: -DBUILD_BPF=On -DUSE_BUNDLED_DEPS=False -DWITH_CHISEL=True
    runs-on: ubuntu-latest
    container:
      image: debian:buster
      volumes:
        - /tmp/report/:/tmp/report/
        - /usr/src:/usr/src
        - /lib/modules:/lib/modules
        - /usr/include/bpf:/usr/include/bpf
        - /dev:/dev
    steps:
      - name: Install deps ⛓️
        run: |
          apt update && apt install -y --no-install-recommends \
            ca-certificates \
            cmake \
            build-essential \
            git \
            clang \
            llvm \
            pkg-config \
            autoconf \
            automake \
            libtool \
            libelf-dev \
            wget \
            libb64-dev \
            libc-ares-dev \
            libcurl4-openssl-dev \
            libssl-dev \
            libtbb-dev \
            libjq-dev \
            libjsoncpp-dev \
            libgrpc++-dev \
            protobuf-compiler-grpc \
            libgtest-dev \
            libprotobuf-dev \
            liblua5.1-dev \
            curl \
            gnupg \
            lsb-release

          # install docker-ce-cli, required for e2e tests
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install -y docker-ce-cli

      - name: Checkout Libs ⤵️
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install deps ⛓️
        run: |
          .github/install-deps.sh

      - name: Build and test 🏗️🧪
        run: |
          mkdir -p build
          cd build && cmake ${{ matrix.cmake_opts }} ../
          KERNELDIR=/lib/modules/$(uname -r)/build make -j4
          make  e2e-tests

      - name: Archive test reports
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.name }}_report
          path: |
            /tmp/report/
